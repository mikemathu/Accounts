// <auto-generated />
using System;
using Accounts.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Accounts.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230707042847_SubAccounts2a")]
    partial class SubAccounts2a
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.4.23259.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Accounts.Models.AccountClass", b =>
                {
                    b.Property<int>("AccountClassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AccountClassID"));

                    b.Property<int>("AccountType")
                        .HasColumnType("integer");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AccountClassID");

                    b.ToTable("AccountClasses");
                });

            modelBuilder.Entity("Accounts.Models.AccountDetail", b =>
                {
                    b.Property<int>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AccountID"));

                    b.Property<int>("AccountClassID")
                        .HasColumnType("integer");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("AccountNo")
                        .HasColumnType("integer");

                    b.Property<int>("CashFlowCategoryID")
                        .HasColumnType("integer");

                    b.Property<int>("ConfigurationType")
                        .HasColumnType("integer");

                    b.Property<int>("IsLocked")
                        .HasColumnType("integer");

                    b.HasKey("AccountID");

                    b.HasIndex("AccountClassID");

                    b.HasIndex("CashFlowCategoryID");

                    b.HasIndex("ConfigurationType");

                    b.ToTable("AccountsDetails");
                });

            modelBuilder.Entity("Accounts.Models.CashFlowCategory", b =>
                {
                    b.Property<int>("CashFlowCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CashFlowCategoryID"));

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CashFlowCategoryID");

                    b.ToTable("CashFlowCategories");
                });

            modelBuilder.Entity("Accounts.Models.Configuration", b =>
                {
                    b.Property<int>("ConfigurationType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ConfigurationType"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ConfigurationType");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("Accounts.Models.FiscalPeriod", b =>
                {
                    b.Property<int>("FiscalPeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FiscalPeriodId"));

                    b.Property<DateTime>("CloseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<int>("IsOpen")
                        .HasColumnType("integer");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("FiscalPeriodId");

                    b.ToTable("FiscalPeriods");
                });

            modelBuilder.Entity("Accounts.Models.JournalVoucher", b =>
                {
                    b.Property<int>("JournalVoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("JournalVoucherId"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FiscalNo")
                        .HasColumnType("integer");

                    b.Property<string>("PostedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceReference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("TrasnactionDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("JournalVoucherId");

                    b.ToTable("JournalVouchers");
                });

            modelBuilder.Entity("Accounts.Models.LetterCase", b =>
                {
                    b.Property<int>("LetterCaseType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LetterCaseType"));

                    b.HasKey("LetterCaseType");

                    b.ToTable("LetterCases");
                });

            modelBuilder.Entity("Accounts.Models.SubAccountDetail", b =>
                {
                    b.Property<int>("SubAccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SubAccountID"));

                    b.Property<int>("AccountID")
                        .HasColumnType("integer");

                    b.Property<int>("ConfigurationType")
                        .HasColumnType("integer");

                    b.Property<int>("CurrentBalance")
                        .HasColumnType("integer");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<int>("IsLocked")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SubAccountID");

                    b.HasIndex("AccountID");

                    b.HasIndex("ConfigurationType");

                    b.ToTable("SubAccountsDetails");
                });

            modelBuilder.Entity("Accounts.Models.AccountDetail", b =>
                {
                    b.HasOne("Accounts.Models.AccountClass", "AccountClass")
                        .WithMany()
                        .HasForeignKey("AccountClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Accounts.Models.CashFlowCategory", "CashFlowCategory")
                        .WithMany()
                        .HasForeignKey("CashFlowCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Accounts.Models.Configuration", "Configuration")
                        .WithMany()
                        .HasForeignKey("ConfigurationType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountClass");

                    b.Navigation("CashFlowCategory");

                    b.Navigation("Configuration");
                });

            modelBuilder.Entity("Accounts.Models.SubAccountDetail", b =>
                {
                    b.HasOne("Accounts.Models.AccountDetail", "AccountDetail")
                        .WithMany("SubAccounts")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Accounts.Models.Configuration", "Configuration")
                        .WithMany()
                        .HasForeignKey("ConfigurationType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountDetail");

                    b.Navigation("Configuration");
                });

            modelBuilder.Entity("Accounts.Models.AccountDetail", b =>
                {
                    b.Navigation("SubAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
